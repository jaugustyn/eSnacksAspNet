@{
    ViewData["Title"] = "Home Page";
}
@section Scripts
{
	<script src="~/lib/auto-complete/dist/js/autoComplete.min.js"></script>

	<script>
        const autoCompleteJS = new autoComplete({
            placeHolder: "Enter city to find restaurants nearby",
			data: {
				src: async (query) => {
				  try {
					const source = await fetch(`/Home/GetCities?name=${query}`);
					
					return await source.json();
				  } 
				  catch (error) {
					return error;
				  }
				},
				// cache: true,
				keys: ["cityName"],
			},
			resultItem: {
				highlight: true
			},
			events: {
				input: {
					selection: (event) => {
						const selection = event.detail.selection.value.cityName;
						autoCompleteJS.input.value = selection;
					}
				}
			},
			submit: true,
		});
		
		function validateInput() {
			const input = document.getElementById('autoComplete');
			if (input.value.trim() === '') {
				alert('Input cannot be empty or contain only spaces.');
				event.preventDefault();
			}
        }
		
    </script>

}
<div class="container text-center">
	<div class="row">
		<h1 class="display-3 my-5">Welcome</h1>
	</div>
	<div class="row justify-content-md-center my-3">
		<form asp-controller="Restaurant" asp-action="SearchRestaurants">
			@if(@TempData.TryGetValue("NotFound", out var city))
			{
			<div class="text-danger">No restaurants found in "@city"</div>
			}
			<div class="autoComplete_wrapper m-3">
				<input class="border border-secondary text-center" required name="cityName" id="autoComplete" type="search" dir="ltr" spellcheck="false" autocorrect="off" autocomplete="off" autocapitalize="off">
			</div>
			<br/>
			<input class="btn btn-outline-secondary" type="submit" id="submit" value="Search" onclick="validateInput()"/>
		</form>
	</div>   
</div>